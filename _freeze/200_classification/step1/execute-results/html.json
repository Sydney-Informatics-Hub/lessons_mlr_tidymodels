{
  "hash": "418a6e82654f70264c16762942c686b3",
  "result": {
    "markdown": "# Exploratory Data Analysis (EDA) \n## Pima Indians Diabetes\n\n:::{.callout-note}\n## Learning objective:\n\n- Use tidyverse functions for exploratory data analysis;\n- Introduce and explore the Pima Indians Diabetes dataset;\n- Impute missing data.\n:::\n\n\n::: {.cell}\n\n:::\n\n\n\nToday, we are going to be working with [Pima Indian Women’s diabetes dataset](https://en.wikipedia.org/wiki/Akimel_O%27odham) which contains information on 768 Pima Indian women’s diabetes status, as well as many predictive features:\n\n1) pregnant - Number of times pregnant\n2) glucose - Plasma glucose concentration a 2 hours in an [oral glucose tolerance test](https://en.wikipedia.org/wiki/Glucose_tolerance_test)\n3) pressure - Diastolic blood pressure (mm Hg)\n4) triceps - Triceps skin fold thickness (mm) - [a measure correlated with body fat](https://en.wikipedia.org/wiki/Anthropometry_of_the_upper_arm)\n5) insulin - 2-Hour serum insulin (mu U/ml)\n6) mass - Body mass index (weight in kg/(height in m)^2)\n8) age - Age (years)\n9) diabetes - diabetes status (pos - diabetic; neg - non-diabetic)\n10) pedigree - diabetes pedigree function\n\nThe diabetes pedigree function was developed by [Smith 1988](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC2245318/) to provide a synthesis ofthe diabetes mellitus history in relatives and the genetic relationship of those relatives to the subject. It uses information from parents, grandparents, siblings, aunts and uncles, and first cousin to provide a measure of the expected genetic influence of affected and unaffected relatives on the subject’s eventual diabetes risk.\n\nThe Pima Indians are a group of Native Americans living in an area consisting of what is now central and southern Arizona. The short name, “Pima” is believed to have come from a phrase meaning “I don’t know,” which they used repeatedly in their initial meetings with Spanish colonists. Thanks Wikipedia!\n\n### Let's Explore our data\n\n---\n\n\n::: {.cell hash='step1_cache/html/libraries_502d76027bf262d9b23d6368cf513511'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(tidymodels)\nlibrary(ggcorrplot)\nlibrary(GGally)\nlibrary(qs)\nlibrary(mlbench)\nlibrary(skimr)\ntheme_set(theme_minimal())\n```\n:::\n\n\nLoad data:\n\n\n::: {.cell hash='step1_cache/html/loadInTheData_dd468fed723af9a5a81f46d6373e7663'}\n\n```{.r .cell-code}\n# load the Pima Indians dataset from the mlbench dataset\ndata(PimaIndiansDiabetes)\n# rename dataset to have shorter name because lazy\ndiabetes_data <- PimaIndiansDiabetes\n# look at the variable names\nnames(diabetes_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"pregnant\" \"glucose\"  \"pressure\" \"triceps\"  \"insulin\"  \"mass\"     \"pedigree\"\n[8] \"age\"      \"diabetes\"\n```\n:::\n\n```{.r .cell-code}\n# look at the data\nglimpse(diabetes_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 768\nColumns: 9\n$ pregnant <dbl> 6, 1, 8, 1, 0, 5, 3, 10, 2, 8, 4, 10, 10, 1, 5, 7, 0, 7, 1, 1…\n$ glucose  <dbl> 148, 85, 183, 89, 137, 116, 78, 115, 197, 125, 110, 168, 139,…\n$ pressure <dbl> 72, 66, 64, 66, 40, 74, 50, 0, 70, 96, 92, 74, 80, 60, 72, 0,…\n$ triceps  <dbl> 35, 29, 0, 23, 35, 0, 32, 0, 45, 0, 0, 0, 0, 23, 19, 0, 47, 0…\n$ insulin  <dbl> 0, 0, 0, 94, 168, 0, 88, 0, 543, 0, 0, 0, 0, 846, 175, 0, 230…\n$ mass     <dbl> 33.6, 26.6, 23.3, 28.1, 43.1, 25.6, 31.0, 35.3, 30.5, 0.0, 37…\n$ pedigree <dbl> 0.627, 0.351, 0.672, 0.167, 2.288, 0.201, 0.248, 0.134, 0.158…\n$ age      <dbl> 50, 31, 32, 21, 33, 30, 26, 29, 53, 54, 30, 34, 57, 59, 51, 3…\n$ diabetes <fct> pos, neg, pos, neg, pos, neg, pos, neg, pos, pos, neg, pos, n…\n```\n:::\n:::\n\nLook for missing data:\n\n\n::: {.cell hash='step1_cache/html/EDA_NA_f7896c08ebdea316a668d95371b16bbe'}\n\n```{.r .cell-code}\nanyNA(diabetes_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nIt seems like there is no missing data.\n\n\nGet a summary of the data frame:\n\n\n::: {.cell hash='step1_cache/html/EDAsummary_5c92718589c3d699d3df03a998b84d06'}\n\n```{.r .cell-code}\nsummary(diabetes_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    pregnant         glucose         pressure         triceps     \n Min.   : 0.000   Min.   :  0.0   Min.   :  0.00   Min.   : 0.00  \n 1st Qu.: 1.000   1st Qu.: 99.0   1st Qu.: 62.00   1st Qu.: 0.00  \n Median : 3.000   Median :117.0   Median : 72.00   Median :23.00  \n Mean   : 3.845   Mean   :120.9   Mean   : 69.11   Mean   :20.54  \n 3rd Qu.: 6.000   3rd Qu.:140.2   3rd Qu.: 80.00   3rd Qu.:32.00  \n Max.   :17.000   Max.   :199.0   Max.   :122.00   Max.   :99.00  \n    insulin           mass          pedigree           age        diabetes \n Min.   :  0.0   Min.   : 0.00   Min.   :0.0780   Min.   :21.00   neg:500  \n 1st Qu.:  0.0   1st Qu.:27.30   1st Qu.:0.2437   1st Qu.:24.00   pos:268  \n Median : 30.5   Median :32.00   Median :0.3725   Median :29.00            \n Mean   : 79.8   Mean   :31.99   Mean   :0.4719   Mean   :33.24            \n 3rd Qu.:127.2   3rd Qu.:36.60   3rd Qu.:0.6262   3rd Qu.:41.00            \n Max.   :846.0   Max.   :67.10   Max.   :2.4200   Max.   :81.00            \n```\n:::\n:::\n\n\n:::{.callout-tip}\n## Exercise:\n\nLook at the output of summary above and the table that explains what each of the variables are. \nDo the values make sense for all of:\n- (a) Pregnancies and Glucose\n- (b) Blood pressure and Skin thickness\n- (c) Insulin and DiabetesPedigreeFunction, and\n- (d) BMI and Age\n\nIf not, how do you think we should deal with them?\nCan you hypothesise what the consequences of this approach would be?\n:::\n\n:::{.callout-caution collapse=\"true\"}\n### Solution\n\n::: {.cell hash='step1_cache/html/solution_f32b66fb67852ff053c2e989ef87832a'}\n\n```{.r .cell-code}\n#Possibly missing: \n\ncolSums(diabetes_data == 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npregnant  glucose pressure  triceps  insulin     mass pedigree      age \n     111        5       35      227      374       11        0        0 \ndiabetes \n       0 \n```\n:::\n\n```{.r .cell-code}\n#Not missing:\n\ncolSums(diabetes_data != 0)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\npregnant  glucose pressure  triceps  insulin     mass pedigree      age \n     657      763      733      541      394      757      768      768 \ndiabetes \n     768 \n```\n:::\n:::\n\n\nIt is clear that the values of several variables are zero when it is impossible for them to be so (i.e. this value could not be zero if it was measured). \nHence, we are dealing with \"hidden\" missing data, and should recode it as NA.\n\nThe following variables have zero \"values\" that are actually likely to be missing:\n\n1. Glucose (a)\n2. BloodPressure (b)\n3. SkinThickness (b)\n4. Insulin (c)\n5. BMI (d)\n:::\n\n### Let's use visualisation to further explore the dataset\n\n---\n\n\n::: {.cell hash='step1_cache/html/plotIndividual_c2afa45f88b7efcc0fcf504f1bea8f22'}\n\n```{.r .cell-code}\nggplot(diabetes_data, aes(x = pregnant, fill = diabetes)) + geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](step1_files/figure-html/plotIndividual-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='step1_cache/html/plotAPair_5a0e87e8ef2fc80221df2638eb23494b'}\n\n```{.r .cell-code}\nggplot(\n  diabetes_data,\n  aes(\n    x = pressure,\n    y = glucose,\n    color = diabetes\n  )\n) + geom_point(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](step1_files/figure-html/plotAPair-1.png){width=672}\n:::\n:::\n\n\nIf we wanted to look at all possible scatterplot pairs we would do something like:\n\n::: {.cell hash='step1_cache/html/PairPlot_c0faca63e733da93c52eaa064d53c79c'}\n\n```{.r .cell-code}\n# make a pair plot\nggpairs(data = diabetes_data, \n        mapping = aes(color = diabetes),\n        upper = list(combo = \"box\"))\n```\n\n::: {.cell-output-display}\n![](step1_files/figure-html/PairPlot-1.png){width=672}\n:::\n:::\n\n\nBut it's easier to look at a correlation plot:\n\n\n::: {.cell hash='step1_cache/html/CorPlot_4b1f604cfc75e12c117d03cf56583e2b'}\n\n```{.r .cell-code}\n# get a correlation matrix of the variables in the diabetes dataset:\ndiabetes_corr <- diabetes_data %>%\n  # recode outcome to be numeric (subtract 1 to return it to zero/one)\n  mutate(diabetes = as.integer(diabetes) - 1) %>%\n  cor()\n\nggcorrplot(diabetes_corr, type = \"lower\", lab = TRUE )\n```\n\n::: {.cell-output-display}\n![](step1_files/figure-html/CorPlot-1.png){width=672}\n:::\n:::\n\n\nLet's create a new dataframe `d_na`, which has the missing values recoded as NA:\n\n\n::: {.cell hash='step1_cache/html/RecodeNA_6d836bdcdca456f222a7cde425d7ccf0'}\n\n```{.r .cell-code}\nd_na <- diabetes_data %>%\n  mutate(glucose = na_if(glucose, 0)) %>%\n  mutate(triceps = na_if(triceps, 0)) %>%\n  mutate(insulin = na_if(insulin, 0)) %>%\n  mutate(mass = na_if(mass, 0)) %>%\n  mutate(pressure = na_if(pressure, 0))\n\n# approximately half of the dataset is complete, whereas half is missing data\ntable(complete.cases(d_na))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFALSE  TRUE \n  376   392 \n```\n:::\n\n```{.r .cell-code}\nnaniar::gg_miss_var(d_na)\n```\n\n::: {.cell-output-display}\n![](step1_files/figure-html/RecodeNA-1.png){width=672}\n:::\n\n```{.r .cell-code}\nvisdat::vis_dat(d_na)\n```\n\n::: {.cell-output-display}\n![](step1_files/figure-html/RecodeNA-2.png){width=672}\n:::\n:::\n\n\nLet's compare the correlation plot from before with another one now that we've correctly labelled the missing data:\n\n\n::: {.cell hash='step1_cache/html/CorMissing_9a2f98a1e66a47b2fdce1edde742adc7'}\n\n```{.r .cell-code}\ndiabetes_corr_na <-\n  d_na %>%\n  # recode outcome to be numeric (subtract 1 to return it to zero/one)\n  mutate(diabetes = as.integer(diabetes) - 1) %>%\n  # use pairwise complete observations for the two variables\n  cor(use = \"pairwise.complete.obs\")\n\nggcorrplot(diabetes_corr_na,  type = \"lower\",lab = TRUE)\n```\n\n::: {.cell-output-display}\n![](step1_files/figure-html/CorMissing-1.png){width=672}\n:::\n:::\n\n\nNotice that the correlation between some variables (eg. pregnant - insulin) changes quite substantially. (Negative before to Positive now).\n\n## Train-Test Split\n\n---\n\nWe're going to split our data into 70% training and 30% testing sets.\n\n\n::: {.cell hash='step1_cache/html/test_train_split2_4364fecf32ee058d74a8f3ccd48ad153'}\n\n```{.r .cell-code}\nset.seed(42) # so we all get the same results\n\ndiabetes_split <- initial_split(d_na , prop = 0.7, strata = \"diabetes\" )\nd_na_train <- training(diabetes_split)\nd_na_test <- testing(diabetes_split)\n\nqsave(d_na_train, \"../_models/d_na_train.qs\")\nqsave(d_na_test, \"../_models/d_na_test.qs\")\nqsave(diabetes_split, \"../_models/diabetes_split.qs\")\n```\n:::\n\n\n### Some standard checks on the test/train split\n\nLook how many examples we have in the training and testing sets.\n\n\n::: {.cell hash='step1_cache/html/standard_checks_a98035fed546351f51d7b67814b7cd6b'}\n\n```{.r .cell-code}\ndim(d_na_train)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 537   9\n```\n:::\n\n```{.r .cell-code}\ndim(d_na_test)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 231   9\n```\n:::\n:::\n\n\nPlot histograms of outputs to check we stratified appropriately\n\n::: {.cell hash='step1_cache/html/unnamed-chunk-2_62b2dea9e0abdc8a36c74b684e795115'}\n\n```{.r .cell-code}\ntogether <- bind_rows(train = d_na_train,\n                      test = d_na_test,\n                      .id = \"test_train\" ) \n\ntogether %>%\n  ggplot(aes(x = diabetes))+\n  geom_bar()+\n  facet_grid(test_train~., scales = \"free\")\n```\n\n::: {.cell-output-display}\n![](step1_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntogether %>%\n  {ggduo(., \n         setdiff( names(.), c(\"test_train\", \"diabetes\") ), \n         # column names not including test_train or the outcome\n         \"test_train\")} # faceted by test_train split\n```\n\n::: {.cell-output-display}\n![](step1_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n\nAt some point we’re going to want to do some parameter tuning (explained later), and to do that we’re going to want to use cross-validation. So we can create a cross-validated version of the training set in preparation for that moment:\n\n\n::: {.cell hash='step1_cache/html/cross-validation_8f17b63ff87f98a082fa0147bcc2261d'}\n\n```{.r .cell-code}\ndiabetes_folds <- vfold_cv(d_na_train, v=10, repeats = 5, strata = diabetes)\n\nqsave(diabetes_folds, \"../_models/diabetes_folds.qs\")\n```\n:::\n\n\n### Impute missing data\n\n---\n\nImputation is often used to handle missing data because many statistical methods and machine learning algorithms require complete data. When we do imputation, we aren’t adding new information to our dataset, but we are using the patterns in our dataset so that we don’t have to throw away the data that have some variables missing. \nWe can impute the missing data using a recipe:\n\n\n::: {.cell hash='step1_cache/html/impute_recipe_0d91e1e9247b39f1852a4620d404d3b4'}\n\n```{.r .cell-code}\n# set seed to be 42 so everyone gets the same results\nset.seed(42)\n\ndiabetes_rec <- recipe(diabetes ~ ., data = d_na_train) %>%\n                step_impute_median(all_predictors()) %>%\n                # all our predictors are numeric so standardize them\n                step_normalize(all_numeric_predictors())\n  \n\ndiabetes_rec  \n\nqsave(diabetes_rec, \"../_models/diabetes_rec.qs\")\n```\n:::\n\n\n:::{.callout-note}\n### Key Points\n\n- Classification attempts to predict the class to which a particular observation belongs;\n- There are many different metrics for assessing performance for a classification problem;\n- Which metric you choose and optimise for should be considered carefully, and will be different depending on the problem;\n- Exporatory data analysis is a time consuming but critical process that needs to be carried out prior to any modeling.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}